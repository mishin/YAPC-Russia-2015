#!/usr/bin/perl

=head1 NAME

git_commit_in_the_past.pl - commit with git but using more useful date format

=head1 SYNOPSIS

    perl git_commit_in_the_past.pl [OPTION]... 

    -v, --verbose  use verbose mode
    --help         print this help message
    --date         date in 'dd.mm.yyyy' format or 'today'
    --message      message for commit
    --file         file for commit or '.'
    --debug        only pritn current git command with formatted date

Examples:

    perl git_commit_in_the_past.pl --date '15.05.2015' --message 'Hi YAPC Russia 2015' --file 'file2commit'

=head1 DESCRIPTION

This program need to full holes on github history.

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHOR

=over 1

=item * Nikolay Mishin (L<MISHIN|https://metacpan.org/author/MISHIN>)

=back

=cut

use strict;
use warnings;
use 5.010;
use utf8;
use open qw/:std :utf8/;

use Getopt::Long qw(:config auto_help);
use Pod::Usage;

use Regexp::Common qw(time);
use DateTime;
use DateTime::Format::Strptime;
use Git::Repository;
use Cwd;

exit main();

sub main {

    # Argument parsing
    my $verbose = 0;          # frequently referred
    my $debug   = 0;          # if you want to try command
    my $file    = '.';        # default git add .
    my $date    = 'today';    # default git commit today date
    my %options = (
        'verbose' => \$verbose,
        'debug'   => \$debug,
        'file'    => \$file,
        'date'    => \$date
    );
    GetOptions( \%options, 'verbose', 'debug', 'date=s', 'message=s',
        'file=s', )
      or pod2usage(1);
    if ( !exists $options{date} || !exists $options{message} ) {
        pod2usage(1);
    }
    git_commit( \%options );

    return 0;
}

sub prepare_day {
    my ($date) = @_;
    my $dt = DateTime->now( time_zone => 'Europe/Moscow' );
    if ( $date =~ $RE{time}{dmy}{-keep} ) {
        my $day   = $2;
        my $month = $3;
        my $year  = $4;
        $dt->set_year($year);
        $dt->set_month($month);
        $dt->set_day($day);
    }

    #'Fri Jul 26 19:34:15 2013 +0200';
    my $pattern = '%a %b %d %H:%M %Y %z';
    my $formatter = DateTime::Format::Strptime->new( pattern => $pattern );
    $dt->set_formatter($formatter);
    return $dt->_stringify();
}

sub git_commit {
    my ($options)  = @_;
    my $commit_day = prepare_day( $options->{date} );
    my $message    = $options->{message};
    my $git = Git::Repository->new( work_tree => getcwd );
    if ( $options->{debug} ) {
        say "git commit --date '$commit_day' -m '$message'";
    }
    else {
        $git->run( add => $options->{file} );
        $git->run( commit => '-m', $message, "--date=$commit_day" );
        $git->run('push');
    }
}
